// server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const User = require('./models/User');
const MoodEntry = require('./models/MoodEntry');
const JournalEntry = require('./models/JournalEntry');
const Consultation = require('./models/Consultation');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost/MentalHealthApp', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.post('/register', async (req, res) => {
  const { email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ email, password: hashedPassword });
  await user.save();
  res.status(201).send('User registered successfully');
});

app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (user && (await bcrypt.compare(password, user.password))) {
    const token = jwt.sign({ userId: user._id }, 'your_jwt_secret');
    res.json({ token });
  } else {
    res.status(401).send('Invalid credentials');
  }
});

app.post('/mood', async (req, res) => {
  const { token, mood, date } = req.body;
  const decoded = jwt.verify(token, 'your_jwt_secret');
  const moodEntry = new MoodEntry({ userId: decoded.userId, mood, date });
  await moodEntry.save();
  res.status(201).send('Mood entry saved');
});

app.post('/journal', async (req, res) => {
  const { token, content, date } = req.body;
  const decoded = jwt.verify(token, 'your_jwt_secret');
  const journalEntry = new JournalEntry({ userId: decoded.userId, content, date });
  await journalEntry.save();
  res.status(201).send('Journal entry saved');
});

app.post('/consultation', async (req, res) => {
  const { token, date, description } = req.body;
  const decoded = jwt.verify(token, 'your_jwt_secret');
  const consultation = new Consultation({ userId: decoded.userId, date, description });
  await consultation.save();
  res.status(201).send('Consultation scheduled');
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});
